// /**
//   You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
//   - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
//   - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

//   Each todo has a title and a description. The title is a string and the description is a string.
//   Each todo should also get an unique autogenerated id every time it is created
//   The expected API endpoints are defined below,
//   1.GET /todos - Retrieve all todo items
//     Description: Returns a list of all todo items.
//     Response: 200 OK with an array of todo items in JSON format.
//     Example: GET http://localhost:3000/todos

//   2.GET /todos/:id - Retrieve a specific todo item by ID
//     Description: Returns a specific todo item identified by its ID.
//     Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
//     Example: GET http://localhost:3000/todos/123

//   3. POST /todos - Create a new todo item
//     Description: Creates a new todo item.
//     Request Body: JSON object representing the todo item.
//     Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
//     Example: POST http://localhost:3000/todos
//     Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }

//   4. PUT /todos/:id - Update an existing todo item by ID
//     Description: Updates an existing todo item identified by its ID.
//     Request Body: JSON object representing the updated todo item.
//     Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
//     Example: PUT http://localhost:3000/todos/123
//     Request Body: { "title": "Buy groceries", "completed": true }

//   5. DELETE /todos/:id - Delete a todo item by ID
//     Description: Deletes a todo item identified by its ID.
//     Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
//     Example: DELETE http://localhost:3000/todos/123

//     - For any other route not defined in the server return 404

//   Testing the server - run `npm run test-todoServer` command in terminal
//  */
// const express = require('express');
// const bodyParser = require('body-parser');


// const port = 3000;

// const app = express();

// app.use(bodyParser.json());

// var Todos = [];
// let todoCounter = 0;
// app.delete('/todos/:id', (req, res) => {
//   const Todos_Id = parseInt(req.params.id);
//   const todoIndex = Todos_Id - 1;
//   // for (let i = 0; i < Todos.size; i++) {
//   //   if (i === (Todos_Id - 1)) {
//   //     todoIndex = i;
//   //     break;
//   //   }
//   // }

//   if (todoIndex >= 0 && todoIndex < Todos.length) {
//     Todos.splice(todoIndex, 1);
//     res.status(200).send('the todo item was found and deleted');
//   }
//   else {
//     res.status(404).send("Not Found");
//   }
// })


// app.put('/todos/:id', (req, res) => {
//   const todoIndex = parseInt(req.params.id);
//   // const todoIndex = -1;
//   // for (let i = 0; i < Todos.length; i++) {
//   //   if (i === (Todos_Id - 1)) {
//   //     todoIndex = i;
//   //     break;
//   //   }
//   // }
//   if ((todoIndex - 1) >= 0 && (todoIndex - 1) < Todos.length) {
//     Todos[todoIndex] = JSON.stringify(req.body);
//     res.status(200).json(Todos[todoIndex]);
//   } else {
//     res.status(404).send({ error: "Id not found" });
//   }
// });


// app.post('/todos', (req, res) => {
//   const obj = JSON.stringify(req.body);

//   Todos.push(obj);
//   res.status(201).send("new object is added");
// })



// app.get('/todos/:id', (req, res) => {
//   const Todos_Id = parseInt(req.params.id);
//   const idx = Todos_Id - 1;
//   if (idx >= 0 && idx < Todos.length) {

//     res.status(200).json(todo);
//   }
//   else {
//     res.status(404).send("Todo not found on this id");
//   }

// })


// app.get('/todos', (req, res) => {
//   res.status(200).json(Todos);
// })


// app.listen(port, () => {
//   console.log(`App is listening at ${port}`);
// });
// module.exports = app;

const express = require('express');
const bodyParser = require('body-parser');

// const port = 3000;
const app = express();
app.use(bodyParser.json());

let Todos = [];
let todoCounter = 0;

app.post('/todos', (req, res) => {
  try {
    const newTodo = {
      id: ++todoCounter,
      title: req.body.title,
      description: req.body.description
    };
    Todos.push(newTodo);
    res.status(201).json(newTodo);
  } catch (error) {
    res.status(500).send({ error: 'Internal Server Error' });
  }
});

app.get('/todos', (req, res) => {
  try {
    res.status(200).json(Todos);
  } catch (error) {
    res.status(500).send({ error: 'Internal Server Error' });
  }
});

app.get('/todos/:id', (req, res) => {
  try {
    const Todos_Id = parseInt(req.params.id);
    const todo = Todos.find(item => item.id === Todos_Id);

    if (todo) {
      res.status(200).json(todo);
    } else {
      res.status(404).send("Todo not found with this ID");
    }
  } catch (error) {
    res.status(500).send({ error: 'Internal Server Error' });
  }
});

app.put('/todos/:id', (req, res) => {
  try {
    const Todos_Id = parseInt(req.params.id);
    const todoIndex = Todos.findIndex(todo => todo.id === Todos_Id);

    if (todoIndex !== -1) {
      Todos[todoIndex] = { ...Todos[todoIndex], ...req.body };
      res.status(200).json(Todos[todoIndex]);
    } else {
      res.status(404).send({ error: "Id not found" });
    }
  } catch (error) {
    res.status(500).send({ error: 'Internal Server Error' });
  }
});

app.delete('/todos/:id', (req, res) => {
  try {
    const Todos_Id = parseInt(req.params.id);
    const todoIndex = Todos.findIndex(todo => todo.id === Todos_Id);

    if (todoIndex !== -1) {
      Todos.splice(todoIndex, 1);
      res.status(200).send({ message: 'Todo item deleted successfully' });
    } else {
      res.status(404).send("Todo ID not found");
    }
  } catch (error) {
    res.status(500).send({ error: 'Internal Server Error' });
  }
});

const port = process.env.TEST_ENV ? 0 : 3000; // Port 0 will let the system assign a free port
app.listen(port, () => {
  const actualPort = server.address().port;
  console.log(`App is listening at ${actualPort}`);
});

module.exports = app; // Export the server for testing purposes
